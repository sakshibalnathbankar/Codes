package Prims;

public class Prims 
{
    int v=0;
    int adj[][];
    
    public Prims(int vertex)
    {
        v= vertex;
        adj = new int [vertex +1][vertex + 1];
    }
    
    public int checkEdge()
    {
        int count=0;
        for(int i=1;i<=v;i++)
        {
            for(int j=1;j<=v;j++)
            {
                if(adj[i][j]!=0)
                {
                    count++;
                }
            }
        }
        if(count==0)
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    int addEdge(int s,int d,int c)
    {
        if(adj[s][d]==0)
        {
            adj[s][d]=c;
            adj[d][s]=c;
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
    public void display()
    {
        for(int i=1;i<=v;i++)
        {
            for(int j=1;j<=v;j++)
            {
                System.out.print(adj[i][j] + "\t");
            }
            System.out.println();
        }
    }
    
    public void prims(int edge)
    {
        boolean visited[] = new boolean[v+1];
        int edge1 =0;
        int cost = 0;
        
        for(int i=1;i<=v;i++)
        {
            visited[i]=false;
        }
        
        visited[edge]=true;
        
        while(edge1<v-1)
        {
            int min=Integer.MAX_VALUE;
            int v1=0,v2=0;
            
            for(int i=1;i<=v;i++)
            {
                if(visited[i]==true)
                {
                    for(int j=1;j<=v;j++)
                    {
                        if(visited[j]!=true && adj[i][j]!=0)
                        {
                            if(min>adj[i][j])
                            {
                                min=adj[i][j];
                                v1=i;
                                v2=j;
                            }
                        }
                    }
                }
            }
            cost = cost+min;
            System.out.println(v1+" -> "+v2+" : "+adj[v1][v2]);
            edge1++;
            visited[v2]=true;
        }
        System.out.println("Minimum Cost : "+cost);
    }
    
}
